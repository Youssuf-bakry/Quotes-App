{"version":3,"file":"static/js/879.e555e8c0.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/Single-quote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__luc-r\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__ZiBv6\",\"loading\":\"NewCommentForm_loading__vYdqn\",\"control\":\"NewCommentForm_control__vNd0R\",\"actions\":\"NewCommentForm_actions__XemgN\"};","import { useEffect, useRef } from \"react\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredValue = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredValue },\n      quoteId: props.quoteId,\n    });\n  };\n  // if (status === \"pending\") {\n  //   return (\n  //     <div className=\"centered\">\n  //       <LoadingSpinner />\n  //     </div>\n  //   );\n  // }\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__J1A6j\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__1MZHL\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <div className=\"centered\"> No Comments Yet.</div>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__gRwPB\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HiglightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst SingleQuote = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: quote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n  if (!quote.text) {\r\n    return <p>quote not found</p>;\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <HiglightedQuote text={quote.text} author={quote.author} />\r\n      <div className=\"centered\">\r\n        <Route path={match.path} exact>\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            {\" \"}\r\n            Load Comments\r\n          </Link>\r\n        </Route>\r\n      </div>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SingleQuote;\r\n"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","className","classes","onSubmit","event","preventDefault","enteredValue","current","value","commentData","text","quoteId","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","author","match","useRouteMatch","getSingleQuote","quote","path","exact","to","url"],"sourceRoot":""}